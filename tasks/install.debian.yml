---
- name: Establish some role-related facts
  ansible.builtin.set_fact:
    mongodb_major_version: "{{ mongodb_version[0:3] | string }}"

- name: Disable transparent huge pages on systemd systems
  ansible.builtin.include_tasks: disable_transparent_hugepages.yml
  when:
    - mongodb_disable_transparent_hugepages | bool
    - ansible_service_mgr == "systemd"

- name: Add APT key
  ansible.builtin.get_url:
    url: "https://www.mongodb.org/static/pgp/server-{{ mongodb_major_version }}.asc"
    dest: "/usr/share/keyrings/mongodb-server-{{ mongodb_major_version }}.asc"
    mode: 644
  when: mongodb_package == 'mongodb-org'

- name: Add APT repository
  ansible.builtin.apt_repository:
    repo: "deb [ signed-by=/usr/share/keyrings/mongodb-server-{{ version_item }}.asc] http://repo.mongodb.org/apt/{{ ansible_distribution | lower }}  {{ ansible_distribution_release }}/mongodb-org/{{ version_item }} main"
    update_cache: true
  with_items: "{{ mongodb_major_version }}"
  loop_control:
    loop_var: version_item
  when: mongodb_package == 'mongodb-org' and mongodb_version_supported

- name: Install unsupported mongo to Ubuntu 22+
  when: mongodb_version_supported == false and ansible_distribution == 'Ubuntu'
  block:
    - name: Add Focal security repo
      ansible.builtin.apt_repository:
        repo: "deb http://security.ubuntu.com/ubuntu focal-security main"
    - name: Add Mondo APT repo
      ansible.builtin.apt_repository:
        repo: "deb [ signed-by=/usr/share/keyrings/mongodb-server-{{ version_item }}.asc] http://repo.mongodb.org/apt/ubuntu  focal/mongodb-org/{{ version_item }} multiverse"
        update_cache: true
      with_items: "{{ mongodb_major_version }}"
      loop_control:
        loop_var: version_item

    - name: Install libssl
      ansible.builtin.apt:
        name: libssl1.1
        state: present

    - name: Remove focal security repo
      ansible.builtin.apt_repository:
        repo: "deb http://security.ubuntu.com/ubuntu focal-security main"
        state: absent

- name: Install MongoDB package
  ansible.builtin.apt:
    name: "{{ mongodb_package }}{% if (mongodb_version | length > 3) %}={{ mongodb_version }}{% endif %}"
    state: "{{ mongodb_package_state }}"
    update_cache: true

- name: Check if NUMA is available on host
  ansible.builtin.command: "ls -1 /proc/1/numa_maps"
  register: numa_available
  ignore_errors: true
  changed_when: false
  check_mode: false
  when: mongodb_use_numa | bool

- name: Don't use NUMA if it is unavailable on host
  ansible.builtin.set_fact:
    mongodb_use_numa: false
  when: (mongodb_use_numa | bool and numa_available.rc != 0)

- name: Install numactl package
  ansible.builtin.apt:
    name: numactl
    state: present
  when: mongodb_use_numa | bool

- name: Add systemd configuration if present
  ansible.builtin.template:
    src: mongodb.service.j2
    dest: "/lib/systemd/system/{{ mongodb_daemon_name }}.service"
    owner: root
    group: root
    mode: '0644'
  when:
    - ansible_service_mgr == "systemd"
    - mongodb_manage_systemd_unit | bool
  notify:
    - reload systemd

- name: Add symlink for systemd
  ansible.builtin.file:
    src: "/lib/systemd/system/{{ mongodb_daemon_name }}.service"
    dest: "/etc/systemd/system/multi-user.target.wants/{{ mongodb_daemon_name }}.service"
    state: link
  when:
    - ansible_service_mgr == "systemd"
    - mongodb_manage_systemd_unit | bool
  notify:
    - reload systemd

- name: Install PyMongo package
  ansible.builtin.apt:
    name: "{{ mongodb_pymongo_package }}"
  when: not mongodb_pymongo_from_pip

- name: Install PIP
  ansible.builtin.apt:
    pkg: "{{ mongodb_pymongo_deps }}"
  when: mongodb_pymongo_from_pip | bool

  # TODO: check if it is still needed for Debian/Ubuntu
- name: Install setuptools (required for ansible 2.7+)
  ansible.builtin.apt:
    pkg: "{{ mongodb_python_setuptools }}"
  when: mongodb_pymongo_from_pip | bool

- name: Install PyMongo from PIP
  ansible.builtin.pip:
    name:
      - pymongo
    state: "{{ mongodb_pymongo_pip_version is defined | ternary('present', 'latest') }}"
    version: "{{ mongodb_pymongo_pip_version | default(omit) }}"
    executable: "{{ mongodb_pip_executable }}"
    break_system_packages: true
  when: mongodb_pymongo_from_pip | bool
